// SIM

#include <stdio.h>
#include <assert.h>
#include <stdint.h>
#include <math.h>
enum {
    NO = 0, /* No line */
    RED = 1,
    BLUE = 2
};

typedef int board_t[15];
typedef char player_t;

int ooof(player_t player) {
    if (player == 'R') {
        return RED;
    }
    else if ( player == 'B'){
        return BLUE;
    }
    return NO;
}
int is_full(board_t board) {
    for (int i = 0; i <= 14; i++) {
        if (board[i] == 0) {
            return 0;
        }
    }
    return 1;
}
typedef struct {
    int line; /* 0 for 12, 1 for 13, ..., 14 for 56. */
    int score; /* -1 for loss, 0 for draw, 1 for win. */
} move_t;
int decoder[14348908] ;

int encode(board_t board) {
    int b = 0;
    for (int i = 0; i < 15; i++) {
        b += (board[i]) * pow(3, (14 - i));
    }
    return b;
}

void decode(int n, board_t answer) {
    int index = 14;
    while (index != -1) {
        answer[index] = n % 3;
        n = n / 3;
        index--;
    }
}
player_t other_player(player_t player) {
    switch (player) {
        case 'R':
            return 'B';
        case 'B':
            return 'R';

    }
}
int has_won(board_t board, player_t player) {
    player_t op = other_player(player);
    int num = ooof(op);

    for (int i = 0; i < 14; i++) {
        for (int j = i + 1; j < 15; j++) {
            if (i == 0) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 4 && board[4 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 1) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 4 && board[7 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 2) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 4 && board[9 + j] == num) {
                        return 1;
                    }
                }

            }
            if (i == 3) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 4 && board[10 + j] == num) {
                        return 1;
                    }
                }

            }
            if (i == 5) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 8 && board[3 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 6) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 8 && board[5 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 7) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 8 && board[6 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 9) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 11 && board[2 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 10) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 11 && board[3 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 12) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 13 && board[1 + j] == num) {
                        return 1;
                    }
                }
            }
        }
    }
    return 0;
}

void print_board(board_t board) {
    for (int i = 0; i < 15; ++i) {
        switch (board[i]) {
            case NO:
                printf(". ");
                break;
            case RED:
                printf("R  ");
                break;
            case BLUE:
                printf("B  ");
                break;
        }
    }
    printf("\n");
    if (has_won(board, 'R'))
    {
        printf("Red player has won!\n");
    }
    else if (has_won(board, 'B'))
    {
        printf("Blue player has won!\n");
    }
}
player_t chance(board_t board){
    int reds=0,blues=0;
    player_t answer;
    for (int i = 0; i < 15; i++){
        if (board[i]== RED){reds++;}
        if (board[i]==BLUE){blues++;}
    }
    if (blues >= reds)
    {
        answer = 'R';
    }
    else if ( reds>blues){
        answer = 'B';
    }
    return answer;
}
int best_move(board_t board) {
    assert(!is_full(board));
    assert(!has_won(board,'B'));
    assert(!has_won(board,'R'));

    int maxlose=0;
    int required = -1;
    player_t play = chance(board);
    for (int k = 0; k < 15; k++){
        if (!board[k]){
            board[k] =ooof(play);
            if (!has_won(board,other_player(play)))
            {
                required = k;
            }
            board[k]=0;
        }   
    }
    for (int  i = 0; i < 15; i++){
        if(board[i]==0){
            board[i] = ooof(play);
            if (!has_won(board,other_player(play))){
                int zeros=0 , losing = 0;
                for (int  j = 0; j < 15; j++){
                    if (board[j]==0){
                        zeros++;
                        board[j] = ooof(other_player(play));
                        if (has_won(board,play)){
                            losing++;
                        }
                        board[j]=0;
                    }
                }
                board[i] = 0;
                if (zeros == losing){
                    required = i;
                    break;
                }
                else if(losing>maxlose && losing){
                    maxlose = losing;
                    required = i;
                }
            }
            board[i]=0;
        }
    }

    if (required ==-1)
    {
        printf("You Won : ");
    }
    else{
        decoder[encode(board)] = required;
        return required;
    }
}


int main()
{
    board_t board;
    player_t player;
    int values[15] = {12,13,14,15,16,23,24,25,26,34,35,36,45,46,56};

    for (int i = 0; i < 15; ++i)
    {
        board[i] = 0;
    }

    printf("Choose Your Player, R for red and B for Blue\nRed Plays first: ");
    scanf(" %c", &player);
    if (player == 'B'){
        int move =best_move(board);
        board[move] = 1;
        printf("Response is %d\n" , values[move]);
        print_board(board);
    }

    int value;
    while (!has_won(board, 'R') && !has_won(board, 'B') && !is_full(board)){
        scanf("%d", &value);
        board[value] = ooof(player);
        printf("Your Move is %d\n" , values[value]);
        print_board(board);
        int move =best_move(board);
        board[move] = ooof(chance(board));
        printf("Response is %d\n" , values[move]);
        print_board(board);
    }
    return 0;
}Â 



// Connect4

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>

#define ROWS 4
#define COLUMNS 5
#define RED 'R'
#define BLUE 'B'
#define EMPTY ' '

typedef char board_t[ROWS][COLUMNS];
typedef char player_t;

// Initialize the board with empty spaces.
void initializeBoard(board_t board) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLUMNS; j++) {
            board[i][j] = EMPTY;
        }
    }
}

// Display the current state of the board.
void printBoard(board_t board) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLUMNS; j++) {
            printf("| %c ", board[i][j]);
        }
        printf("|\n");
    }
    printf("  1   2   3   4   5\n");
}

// Drop a piece in the specified column.
bool dropPiece(board_t board, int column, player_t player) {
    if (column < 1 || column > COLUMNS) {
        printf("Invalid column. Please choose a column between 1 and 5.\n");
        return false;
    }

    for (int i = ROWS - 1; i >= 0; i--) {
        if (board[i][column - 1] == EMPTY) {
            board[i][column - 1] = player;
            return true;
        }
    }

    printf("Column is full. Please choose another column.\n");
    return false;
}

// Check if a player has won.
bool hasWon(board_t board, player_t player) {
    // Check for horizontal win
    for (int row = 0; row < ROWS; row++) {
        for (int col = 0; col <= COLUMNS - 4; col++) {
            if (board[row][col] == player &&
                board[row][col + 1] == player &&
                board[row][col + 2] == player &&
                board[row][col + 3] == player) {
                return true;
            }
        }
    }

    // Check for vertical win
    for (int row = 0; row <= ROWS - 4; row++) {
        for (int col = 0; col < COLUMNS; col++) {
            if (board[row][col] == player &&
                board[row + 1][col] == player &&
                board[row + 2][col] == player &&
                board[row + 3][col] == player) {
                return true;
            }
        }
    }

    // Check for diagonal win (bottom-left to top-right)
    for (int row = 3; row < ROWS; row++) {
        for (int col = 0; col <= COLUMNS - 4; col++) {
            if (board[row][col] == player &&
                board[row - 1][col + 1] == player &&
                board[row - 2][col + 2] == player &&
                board[row - 3][col + 3] == player) {
                return true;
            }
        }
    }

    // Check for diagonal win (top-left to bottom-right)
    for (int row = 0; row <= ROWS - 4; row++) {
        for (int col = 0; col <= COLUMNS - 4; col++) {
            if (board[row][col] == player &&
                board[row + 1][col + 1] == player &&
                board[row + 2][col + 2] == player &&
                board[row + 3][col + 3] == player) {
                return true;
            }
        }
    }

    return false;
}

    // Implement the win-checking logic (horizontal, vertical, and diagonal)
    // Return true if the player has won, false otherwise.
    // This is where you should add the win-checking logi

// Check if the board is full.
bool isFull(board_t board) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLUMNS; j++) {
            if (board[i][j] == EMPTY) {
                return false;
            }
        }
    }
    return true;
}

// Computer AI: Find the best move for the computer player (for a basic AI).
int bestMove(board_t board, player_t player) {
    // Implement a simple AI strategy to find the best move.
    for (int col = 0; col < COLUMNS; col++) {
        for (int row = ROWS - 1; row >= 0; row--) {
            if (board[row][col] == EMPTY) {
                return col + 1; // Return the column to play the piece.
            }
        }
    }
    return -1; // No valid move found.
}

// Main game logic
int main() {
    board_t board;
    initializeBoard(board);

    player_t humanPlayer;
    printf("Enter 'R' for red player or 'B' for blue player: ");
    scanf(" %c", &humanPlayer);

    if (humanPlayer != RED && humanPlayer != BLUE) {
        printf("Invalid player choice. Please choose 'R' or 'B'.\n");
        return 1;
    }

    player_t computerPlayer = (humanPlayer == RED) ? BLUE : RED;

    int moves = 0;
    printf("Welcome to Connect Four!\n");
    printBoard(board);

    while (true) {
        if (moves % 2 == 0) {
            // Human player's turn
            int column;
            printf("Player %c's turn. Choose a column (1-5): ", humanPlayer);
            scanf("%d", &column);

            if (dropPiece(board, column, humanPlayer)) {
                moves++;
                printBoard(board);

                if (hasWon(board, humanPlayer)) {
                    printf("Player %c wins! Congratulations!\n", humanPlayer);
                    break;
                } else if (isFull(board)) {
                    printf("It's a draw!\n");
                    break;
                }
            }
        } else {
            // Computer player's turn
            printf("Computer (Player %c)'s turn...\n", computerPlayer);
            int column = bestMove(board, computerPlayer);

            if (column != -1) {
                dropPiece(board, column, computerPlayer);
                moves++;
                printBoard(board);

                if (hasWon(board, computerPlayer)) {
                    printf("Player %c wins! Congratulations!\n", computerPlayer);
                    break;
                } else if (isFull(board)) {
                    printf("It's a draw!\n");
                    break;
                }
            }
        }
    }

Â Â Â Â returnÂ 0;
}
