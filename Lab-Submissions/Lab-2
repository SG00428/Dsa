// SIM

#include <stdio.h>
#include <assert.h>
#include <stdint.h>
#include <math.h>
enum {
    NO = 0, /* No line */
    RED = 1,
    BLUE = 2
};

typedef int board_t[15];
typedef char player_t;

int ooof(player_t player) {
    if (player == 'R') {
        return RED;
    }
    else if ( player == 'B'){
        return BLUE;
    }
    return NO;
}
int is_full(board_t board) {
    for (int i = 0; i <= 14; i++) {
        if (board[i] == 0) {
            return 0;
        }
    }
    return 1;
}
typedef struct {
    int line; /* 0 for 12, 1 for 13, ..., 14 for 56. */
    int score; /* -1 for loss, 0 for draw, 1 for win. */
} move_t;
int decoder[14348908] ;

int encode(board_t board) {
    int b = 0;
    for (int i = 0; i < 15; i++) {
        b += (board[i]) * pow(3, (14 - i));
    }
    return b;
}

void decode(int n, board_t answer) {
    int index = 14;
    while (index != -1) {
        answer[index] = n % 3;
        n = n / 3;
        index--;
    }
}
player_t other_player(player_t player) {
    switch (player) {
        case 'R':
            return 'B';
        case 'B':
            return 'R';

    }
}
int has_won(board_t board, player_t player) {
    player_t op = other_player(player);
    int num = ooof(op);

    for (int i = 0; i < 14; i++) {
        for (int j = i + 1; j < 15; j++) {
            if (i == 0) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 4 && board[4 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 1) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 4 && board[7 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 2) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 4 && board[9 + j] == num) {
                        return 1;
                    }
                }

            }
            if (i == 3) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 4 && board[10 + j] == num) {
                        return 1;
                    }
                }

            }
            if (i == 5) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 8 && board[3 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 6) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 8 && board[5 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 7) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 8 && board[6 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 9) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 11 && board[2 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 10) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 11 && board[3 + j] == num) {
                        return 1;
                    }
                }
            }
            if (i == 12) {
                if (board[i] == num && board[j] == num) {
                    if (j <= 13 && board[1 + j] == num) {
                        return 1;
                    }
                }
            }
        }
    }
    return 0;
}

void print_board(board_t board) {
    for (int i = 0; i < 15; ++i) {
        switch (board[i]) {
            case NO:
                printf(". ");
                break;
            case RED:
                printf("R  ");
                break;
            case BLUE:
                printf("B  ");
                break;
        }
    }
    printf("\n");
    if (has_won(board, 'R'))
    {
        printf("Red player has won!\n");
    }
    else if (has_won(board, 'B'))
    {
        printf("Blue player has won!\n");
    }
}
player_t chance(board_t board){
    int reds=0,blues=0;
    player_t answer;
    for (int i = 0; i < 15; i++){
        if (board[i]== RED){reds++;}
        if (board[i]==BLUE){blues++;}
    }
    if (blues >= reds)
    {
        answer = 'R';
    }
    else if ( reds>blues){
        answer = 'B';
    }
    return answer;
}
int best_move(board_t board) {
    assert(!is_full(board));
    assert(!has_won(board,'B'));
    assert(!has_won(board,'R'));

    int maxlose=0;
    int required = -1;
    player_t play = chance(board);
    for (int k = 0; k < 15; k++){
        if (!board[k]){
            board[k] =ooof(play);
            if (!has_won(board,other_player(play)))
            {
                required = k;
            }
            board[k]=0;
        }   
    }
    for (int  i = 0; i < 15; i++){
        if(board[i]==0){
            board[i] = ooof(play);
            if (!has_won(board,other_player(play))){
                int zeros=0 , losing = 0;
                for (int  j = 0; j < 15; j++){
                    if (board[j]==0){
                        zeros++;
                        board[j] = ooof(other_player(play));
                        if (has_won(board,play)){
                            losing++;
                        }
                        board[j]=0;
                    }
                }
                board[i] = 0;
                if (zeros == losing){
                    required = i;
                    break;
                }
                else if(losing>maxlose && losing){
                    maxlose = losing;
                    required = i;
                }
            }
            board[i]=0;
        }
    }

    if (required ==-1)
    {
        printf("You Won : ");
    }
    else{
        decoder[encode(board)] = required;
        return required;
    }
}


int main()
{
    board_t board;
    player_t player;
    int values[15] = {12,13,14,15,16,23,24,25,26,34,35,36,45,46,56};

    for (int i = 0; i < 15; ++i)
    {
        board[i] = 0;
    }

    printf("Choose Your Player, R for red and B for Blue\nRed Plays first: ");
    scanf(" %c", &player);
    if (player == 'B'){
        int move =best_move(board);
        board[move] = 1;
        printf("Response is %d\n" , values[move]);
        print_board(board);
    }

    int value;
    while (!has_won(board, 'R') && !has_won(board, 'B') && !is_full(board)){
        scanf("%d", &value);
        board[value] = ooof(player);
        printf("Your Move is %d\n" , values[value]);
        print_board(board);
        int move =best_move(board);
        board[move] = ooof(chance(board));
        printf("Response is %d\n" , values[move]);
        print_board(board);
    }
    return 0;
}Â 



// Connect4

#include <stdio.h>
#include <limits.h>
#include <stdlib.h> // Add this for srand and rand

enum {
    EMPTY = 0,
    RED,
    BLUE,
};

typedef char board_t[4][5];
typedef char player_t;

// Define userColor and aiColor as global variables
player_t userColor, aiColor;

int has_won(board_t board, player_t player) {
    char target;
    if (player == RED)
        target = 'R';
    else
        target = 'B';

    // Check horizontally
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 2; j++) {
            if (board[i][j] == target && board[i][j + 1] == target && board[i][j + 2] == target && board[i][j + 3] == target) {
                return 1;
            }
        }
    }

    // Check vertically
    for (int i = 0; i < 1; i++) {
        for (int j = 0; j < 5; j++) {
            if (board[i][j] == target && board[i + 1][j] == target && board[i + 2][j] == target && board[i + 3][j] == target) {
                return 1;
            }
        }
    }

    // Check diagonally (left-top to right-bottom)
    for (int i = 0; i < 1; i++) {
        for (int j = 0; j < 2; j++) {
            if (board[i][j] == target && board[i + 1][j + 1] == target && board[i + 2][j + 2] == target && board[i + 3][j + 3] == target) {
                return 1;
            }
        }
    }

    // Check diagonally (right-top to left-bottom)
    for (int i = 0; i < 1; i++) {
        for (int j = 3; j < 5; j++) {
            if (board[i][j] == target && board[i + 1][j - 1] == target && board[i + 2][j - 2] == target && board[i + 3][j - 3] == target) {
                return 1;
            }
        }
    }

    return 0;
}

int is_full(board_t board) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 5; j++) {
            if (board[i][j] == '*') {
                return 0;
            }
        }
    }
    return 1;
}

typedef struct {
    int col;
    int score;
} move_t;

int drop_piece(board_t board, int col, player_t player) {
    // Find the lowest available row in the specified column
    int row = 3;
    while (row >= 0 && board[row][col] != '*')
        row--;

    if (row >= 0) {
        if (player == userColor)
            board[row][col] = (userColor == RED) ? 'R' : 'B';
        else
            board[row][col] = (aiColor == RED) ? 'R' : 'B';
        return row;  // Return the row where the piece was placed
    } else {
        printf("Column %d is already full. Please choose another column.\n", col);
        return -1;  // Return -1 to indicate failure
    }
}

move_t best_move(board_t board, player_t player, int depth, int alpha, int beta) {
    move_t res;
    move_t AIresponse = {.col = -1, .score = (player == aiColor) ? INT_MIN : INT_MAX};

    if (has_won(board, userColor)) {
        AIresponse.score = -10;
        return AIresponse;
    }
    if (has_won(board, aiColor)) {
        AIresponse.score = 10;
        return AIresponse;
    }

    if (is_full(board) || depth == 0) {
        AIresponse.score = 0;
        return AIresponse;
    }

    for (int col = 0; col < 5; ++col) {
        if (board[0][col] == '*') {
            int row = drop_piece(board, col, player);
            if (row != -1) {
                res = best_move(board, (player == aiColor) ? userColor : aiColor, depth - 1, alpha, beta);
                board[row][col] = '*';

                if (player == aiColor) {
                    if (res.score > AIresponse.score) {
                        AIresponse.col = col;
                        AIresponse.score = res.score;
                    }
                    alpha = (alpha > res.score) ? alpha : res.score;
                } else {
                    if (res.score < AIresponse.score) {
                        AIresponse.col = col;
                        AIresponse.score = res.score;
                    }
                    beta = (beta < res.score) ? beta : res.score;
                }

                if (beta <= alpha) {
                    break; // Alpha-beta pruning
                }
            }
        }
    }

    return AIresponse;
}

void print_board(board_t board) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 5; j++) {
            printf("%c", board[i][j]);
        }
        printf("\n");
    }
}

void initialize_board(board_t board) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 5; j++) {
            board[i][j] = '*';
        }
    }
}

int main() {
    board_t board;
    initialize_board(board);

    int userColorChoice;
    printf("Welcome to Connect Four!\n");
    printf("Select your color:\n");
    printf("1. Red\n");
    printf("2. Blue\n");
    printf("Enter your choice (1 or 2): ");
    scanf("%d", &userColorChoice);

    if (userColorChoice == 1) {
        userColor = RED;
        aiColor = BLUE;
        printf("You've selected Red (R). AI is Blue (B).\n");
    } else if (userColorChoice == 2) {
        userColor = BLUE;
        aiColor = RED;
        printf("You've selected Blue (B). AI is Red (R).\n");
    } else {
        printf("Invalid choice. Defaulting to Red (R). AI is Blue (B).\n");
        userColor = RED;
        aiColor = BLUE;
    }

    player_t currentPlayer = userColor;

    printf("Connect Four Game\n");
    printf("You are %s, AI is %s.\n", (userColor == RED) ? "RED" : "BLUE", (aiColor == RED) ? "RED" : "BLUE");
    printf("Empty space is denoted by '*'.\n\n");

    while (1) {
        print_board(board);

        if (currentPlayer == userColor) {
            printf("\nUser's turn \n");
            int col;
            printf("Enter column (0-4) to place your piece: ");
            scanf("%d", &col);

            // Ensure the column is valid and not full
            while (col < 0 || col > 4 || board[0][col] != '*') {
                printf("Invalid column. Please choose again: ");
                scanf("%d", &col);
            }

            // Place user's piece
            drop_piece(board, col, userColor);

            // Check if the user has won
            if (has_won(board, userColor)) {
                print_board(board);
                printf("Congratulations! User wins!\n");
                break;
            }

            currentPlayer = aiColor;
        } else {
            printf("\nAI's turn \n");

            // AI selects the best move using minimax
            move_t bestMove = best_move(board, aiColor, 10, INT_MIN, INT_MAX);
            printf("AI selects column %d.\n", bestMove.col);

            // Place AI's piece
            drop_piece(board, bestMove.col, aiColor);

            // Check if the AI has won
            if (has_won(board, aiColor)) {
                print_board(board);
                printf("AI wins! \n");
                break;
            }

            currentPlayer = userColor;
        }

        // Check if the board is full (tie)
        if (is_full(board)) {
            print_board(board);
            printf("It's a tie!\n");
            break;
        }
    }
return 0;
}
